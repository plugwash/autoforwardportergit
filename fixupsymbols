#!/usr/bin/python3
#(C) 2017 Peter Michael Green <plugwash@debian.org>
#This software is provided 'as-is', without any express or implied warranty. In
#no event will the authors be held liable for any damages arising from the use
#of this software.
#
#Permission is granted to anyone to use this software for any purpose, including
#commercial applications, and to alter it and redistribute it freely, subject to
#the following restrictions:
#
#1. The origin of this software must not be misrepresented; you must not claim.
#that you wrote the original software. If you use this software in a product,
#an acknowledgment in the product documentation would be appreciated but is.
#not required.
#
#2. Altered source versions must be plainly marked as such, and must not be
#misrepresented as being the original software.
#
#3. This notice may not be removed or altered from any source distribution.

import sys
import re
import subprocess
import collections
import afpg_readconfig
from difflib import SequenceMatcher
from afpg_util import mergelists

aggressive = afpg_readconfig.readconfigentry('main','aggressivesymbolsfixup').upper() == 'YES'


filetofix = sys.argv[1]

f = open(filetofix,'rb')
lines = f.readlines()
f.close()

ld = []
lm = []
lu = []

mode = 0; # 0: unconflicted text 1: downstream text 2: mergehead text 3: upstream text


#for stage in range(0,2):
for line in lines:
		#print(repr(line))
		if (line.startswith(b'<<<<<<< ')):
			if (mode == 0):
				mode = 1
				#print('found <<<<<<< switching to mode 1')
			else:
				print('broken diff3, unexpected <<<<<<<', file=sys.stderr)
				sys.exit(1);
		elif (line.startswith(b'||||||| ')):
			if (mode == 1):
				mode = 2
				#print('found ||||||| switching to mode 2')
			else:
				print('broken diff3, unexpected |||||||', file=sys.stderr)
				sys.exit(1);
		elif (line == b'=======\n'):
			if (mode == 2):
				mode = 3
				#print('found ======= switching to mode 3')
			else:
				print('broken diff3, unexpected =======', file=sys.stderr)
				sys.exit(1);
		elif (line.startswith(b'>>>>>>> ')):
			if (mode == 3):
				#print('found >>>>>>> switching to mode 0')
				mode = 0
			else:
				print('broken diff3, unexpected >>>>>>>', file=sys.stderr)
				sys.exit(1);
		else:
			if ((mode == 0) or (mode == 1)):
				ld.append(line)
			if ((mode == 0) or (mode == 2)):
				lm.append(line)
			if ((mode == 0) or (mode == 3)):
				lu.append(line)

def makesymbolsdict(lines):
	sd = collections.OrderedDict()
	for line in lines:
		#print(repr(line))
		stripped = line.strip()
		if stripped[0] == ord(b'#'):
			#comment line, treat the whole line as the "smbol name"
			name = stripped
			text = line
		else:
			#print(line)
			nobrackets = re.sub(br'\([^\)]*\)', b'', stripped)
			match = re.match(br'"[^"]*',nobrackets)
			#print(repr(match))
			if match is None:
				name = nobrackets.split(b' ')[0]
			else:
				name = match.group()[1:]
			text = line
		#print(name)
		if name in sd:
			print('duplicate symbol name '+repr(name))
		sd[name] = text
			#if (name != line):
			#	sys.exit(1)
	return sd

dd = makesymbolsdict(ld)
dm = makesymbolsdict(lm)
du = makesymbolsdict(lu)

#extract sets from dictionaries.
sd = set(dd.keys())
sm = set(dm.keys())
su = set(du.keys())

dsadded = sd - sm
dsremoved = sm - sd
usadded = su - sm
usremoved = sm - su

#print(dsadded)
#print(dsremoved)
#print(usadded)
#print(usremoved)


finalset = sm | usadded | dsadded - usremoved - dsremoved

final = []

for symbol in mergelists(list(du.keys()),b = list(dd.keys())):
	#if symbol == b'_ZTVSt15_Sp_counted_ptrIPN4Kleo21KConfigBasedKeyFilterELN9__gnu_cxx12_Lock_policyE2EE@Base':
	#	print(symbol)
	#	print(dd[symbol])
	#	print(dm[symbol])
	#	print(du[symbol])
	if symbol not in dd:
		final.append(du[symbol])
	elif symbol not in du:
		final.append(dd[symbol])
	elif du[symbol] == dd[symbol]:
		final.append( du[symbol])
	elif du[symbol] == dm[symbol]:
		#upstream matches mergehead, so use downstream
		final.append(dd[symbol])
	elif dd[symbol] == dm[symbol]:
		#downstream matches mergehead, so use upstream
		final.append(du[symbol])
	else:
		#print(repr(dubd[symbol]))
		#print(repr(dubd[symbol][0]))
		if (aggressive):
			print('Warning: upstream, downstream and mergehead have symbol '+symbol.decode('ascii')+' with different metadata, using downstream metadata, upstream metadata is '+repr(du[symbol])+' downstream metadata is '+repr(dd[symbol])+ 'mergehead metadata is '+repr(dm[symbol]))
			final.append(dd[symbol])
		else:
			print('Error: upstream, downstream and mergehead have symbol '+symbol.decode('ascii')+' with different metadata, upstream metadata is '+repr(du[symbol])+' downstream metadata is '+repr(dd[symbol])+ 'mergehead metadata is '+repr(dm[symbol]))
			sys.exit(1)

f = open(filetofix+'.new','wb')

#print('foo')

for line in final:
	#print(type(line))
	#sys.exit(1);
	f.write(line)

f.close

#sys.exit(1)

command = ['mv',filetofix+'.new',filetofix]
print(command, flush=True)
if (subprocess.call(command) != 0): 
    print('moviing result into place failed')
    sys.exit(1)
